---

- name: "Collect potential host-file"
  become: false
  ansible.builtin.stat:
    path: "{{ host_files_dir.stat.path + '/' + (file.path.split(project_name + '/')[1:] | join(project_name + '/')).split('.j2')[0] }}"
  delegate_to: "localhost"
  when: file_type != 'host_file' and host_files_dir.stat.isdir is defined and host_files_dir.stat.isdir
  register: potential_host_file

- name: "Define remote path"
  ansible.builtin.set_fact:
    remote_path: "{{ project_dir + '/' + (file.path.split(project_name + '/')[1:] | join(project_name + '/')).split('.j2')[0] }}"

- name: "Copy file if no host_file exists or copy host_file"
  ansible.builtin.copy:
    src: "{{ file.path }}"
    dest: "{{ remote_path }}"
    mode: "{{ project_deployment_file_mode if not \
      remote_path | ifalatik.docker.any_regex_matches(regex_secret_remote_paths) \
      else project_deployment_secret_file_mode }}"
    owner: "{{ project_deployment_owner }}"
    group: "{{ project_deployment_group }}"
  become: true
  diff: "{{ not remote_path | ifalatik.docker.any_regex_matches(regex_secret_remote_paths) }}"
  when: file_type == 'host_file' or
    ( file_type == 'file' and not ( potential_host_file.stat.exists is defined and potential_host_file.stat.exists ) )
  register: copy_result

- name: "Copy template if no host_file exists"
  ansible.builtin.template:
    src: "{{ file.path }}"
    dest: "{{ remote_path }}"
    mode: "{{ project_deployment_file_mode if not \
      remote_path | ifalatik.docker.any_regex_matches(regex_secret_remote_paths) \
      else project_deployment_secret_file_mode }}"
    owner: "{{ project_deployment_owner }}"
    group: "{{ project_deployment_group }}"
  become: true
  diff: "{{ not remote_path | ifalatik.docker.any_regex_matches(regex_secret_remote_paths) }}"
  when: file_type == 'template' and not ( potential_host_file.stat.exists is defined and potential_host_file.stat.exists )
  register: template_result

- name: "Notify restart handler if changes occured and file requires a restart"
  ansible.builtin.assert:  # workaround to do nothing but still notify a handler
    that: true
    quiet: true
  changed_when: true
  when: (copy_result.changed or template_result.changed) and not (remote_path | ifalatik.docker.any_regex_matches(regex_ignore_changes_remote_paths))
  notify: ["Stop project", "Start project"]

...
